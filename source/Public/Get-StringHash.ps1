function Get-StringHash
{
    <#
        .DESCRIPTION
            Generates a hash of an string object
        .PARAMETER Strings
            Defines the array of strings to generate hashes of
        .PARAMETER Algorithm
            Defines which hashing algorithm to use, valid values are MD5, SHA256, SHA384 and SHA512. Defaults to SHA512
        .PARAMETER Salt
            Defines a specific salt to use, this is useful when recalculating a string hash with a known salt for comparison. A new random salt
            is generated by default for every string that is processed.
        .PARAMETER Iterations
            Defines the number of rehashing operations that is performed.
        .PARAMETER RandomSalt
            Defines that a random salt should be used
        .EXAMPLE
            Get-StringHash -Strings 'ThisIsAComplicatedPassword123#' -Algorithm SHA512
            Hashes the string specified
    #>
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSReviewUnusedParameter', '', Justification = 'False positive')]
    [CmdletBinding()]
    param (
        [Parameter(Mandatory, ValueFromPipeline)][String[]]$Strings,
        [ValidateSet('MD5', 'SHA256', 'SHA384', 'SHA512', 'SHA1')][string]$Algorithm = 'SHA256',
        [string]$Salt = '',
        [switch]$RandomSalt,
        [int]$Iterations = 10
    )
    BEGIN
    {
        if ($Iterations -eq 0)
        {
            $Iterations = 1
        }
    }
    PROCESS
    {
        $Strings | ForEach-Object {
            # if no salt is specified, generate a new salt to use.
            if ($RandomSalt)
            {
                $Salt = [guid]::NewGuid().Guid
            }
            $String = $_
            $StringBytes = [Text.Encoding]::UTF8.GetBytes($String)
            if ($Salt -ne '')
            {
                $SaltBytes = [Text.Encoding]::UTF8.GetBytes($salt)
            }
            $Hasher = [Security.Cryptography.HashAlgorithm]::Create($Algorithm)
            $StringBuilder = New-Object -TypeName System.Text.StringBuilder

            $Measure = Measure-Command -Expression {
                # Compute first hash
                if ($Salt -ne '')
                {
                    $HashBytes = $Hasher.ComputeHash($StringBytes + $SaltBytes)
                }
                else
                {
                    $HashBytes = $Hasher.ComputeHash($StringBytes)
                }

                # Iterate rehashing
                if ($Iterations -ge 2)
                {
                    2..$Iterations | ForEach-Object {
                        if ($Salt -ne '')
                        {
                            $HashBytes = $Hasher.ComputeHash($HashBytes + $StringBytes + $SaltBytes)
                        }
                        else
                        {
                            $HashBytes = $Hasher.ComputeHash($HashBytes + $StringBytes)
                        }
                    }
                }
            }

            # Convert final hash to a string
            $HashBytes | ForEach-Object {
                $null = $StringBuilder.Append($_.ToString('x2'))
            }

            # Return object
            [pscustomobject]@{
                Hash           = $StringBuilder.ToString()
                OriginalString = $String
                Algorithm      = $algorithm
                Iterations     = $Iterations
                Salt           = $salt
                Compute        = [math]::Round($Measure.TotalMilliseconds)
            }

        }
    }
}
